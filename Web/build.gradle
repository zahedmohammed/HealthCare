buildscript {
    ext {
        springBootVersion = SPRING_BOOT_VERSION
    }
    repositories {
        mavenCentral()
        maven {
            url 'https://repo.spring.io/libs-milestone'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')

    }
}


apply plugin: 'docker'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


group = 'io.fxlabs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
    jcenter()
}


ext {
    springCloudVersion = 'Dalston.SR4'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    //compile('org.springframework.boot:spring-boot-actuator-docs')
    //compile('org.springframework.boot:spring-boot-starter-amqp')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-cache')

    compile('org.springframework.retry:spring-retry')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.session:spring-session-jdbc')
    compile('org.springframework.boot:spring-boot-starter-validation')
    //compile('io.springfox:springfox-swagger2:2.8.0')
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.8.0'
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.8.0'
    //compile('net.bull.javamelody:javamelody-spring-boot-starter:1.71.0-SNAPSHOT')
    compile('net.bull.javamelody:javamelody-spring-boot-starter:1.74.0')
    //compileOnly('org.springframework.boot:spring-boot-starter-tomcat')
    //compile('org.springframework.boot:spring-boot-starter-websocket')
    runtime('org.springframework.boot:spring-boot-devtools')
    //runtime('org.postgresql:postgresql')
    //compileOnly('org.projectlombok:lombok')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile('org.springframework.security:spring-security-test')


    // Modules
    compile project(":DAO")
    compile project(":REST")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


def webappDir = "$projectDir/src/main/ui/material"
sourceSets {
    main {
        resources {
            srcDirs = ["src/main/ui/dist", "src/main/resources"]
        }
    }
}

processResources {
    //dependsOn "buildAngular"
}

task buildAngular(type: Exec) {
    // installAngular should be run prior to this task
    dependsOn "installAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    // Add task to the standard build group
    group = BasePlugin.BUILD_GROUP
    // ng doesn't exist as a file in windows -> ng.cmd
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build"
    } else {
        commandLine "ng", "build", "--prod", "--build-optimizer"
    }
}

task buildAngularDev(type: Exec) {
    // installAngular should be run prior to this task
    dependsOn "installAngular"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    // Add task to the standard build group
    group = BasePlugin.BUILD_GROUP
    // ng doesn't exist as a file in windows -> ng.cmd
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "ng.cmd", "build"
    } else {
        commandLine "ng", "build"
    }
}

task installAngular(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

task buildDockerLatest(type: Docker, dependsOn: build) {
    push = false
    tag = 'fxlabs/issues'
    tagVersion = "latest"
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from 'build/libs/Web-0.0.1-SNAPSHOT.jar'
            into 'build/docker'
        }
    }
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    tag = 'fxlabs/issues'
    tagVersion = getDate()
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from 'build/libs/Web-0.0.1-SNAPSHOT.jar'
            into 'build/docker'
        }
    }
}

task buildDockerNightly(type: Docker, dependsOn: build) {
    push = false
    tag = 'fxlabs/issues'
    tagVersion = getNightly()
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from 'build/libs/Web-0.0.1-SNAPSHOT.jar'
            into 'build/docker'
        }
    }
}

def getNightly() {
    new Date().format('yyyy-MM-dd')
}
def getDate() {
    new Date().format('yyyy-MM-dd-HHmm')
}

bootRun {
    //jvmArgs = ["-Dspring.config.location=/opt/fx/config"]
}